using Nocturnal.Settings;
using Nocturnal.Settings.Wrappers;
using System;
using System.Collections;
using UnityEngine;
using VRC;
namespace Nocturnal.Exploits
{
	internal class PlayerList
	{

		internal static IEnumerator PlayerListManager()
		{
			var getf = Ui.Objects.friendListManager;
			var curentp = System.Diagnostics.Process.GetCurrentProcess();

			while (true)
			{


				if (Settings.ConfigVars.playerlist && false) continue;
				Ui.QMBasic.playerListText.text = "";

				var player = PlayerManager.prop_PlayerManager_0.field_Private_List_1_Player_0;
				for (int i = 0; i < player.Count; i++)
				{
					try
					{
						string vr = player[i].prop_VRCPlayerApi_0.IsUserInVR() ? "<color=#c1a8ff>VR</color>" : "<color=#ff0000>No VR</color>";
						string platform = player[i].field_Private_APIUser_0.last_platform != "standalonewindows" ? "<color=#7dffaa>[Quest]</color>" : "<color=#7d88ff>[PC]</color>";
						string room = player[i].prop_VRCPlayerApi_0.isMaster ? "[<color=#ff0a3b>M</color>] " : "";
						string friends = player[i].IsFriend() ? "[<color=yellow>Friend</color>] " : "";
						float fps = player[i].prop_PlayerNet_0.prop_Byte_0 != 0 ? 1000 / player[i].prop_PlayerNet_0.prop_Byte_0 : 0;
						Color clr = Color.white;
						string ranktext = "";
						var username = player[i].field_Private_APIUser_0.displayName;
						Ranks.GetTrustRank(player[i].field_Private_APIUser_0, ref ranktext, ref clr);
						Ranks.ConvertToColorRank(ref ranktext, ref username);
						Ui.QMBasic.playerListText.text += $"[{i}]{room}{friends}[{ranktext}] [{username}] [{platform}] [{vr}] [<color=#5967ff>P</color>:<color=#1c2fff>{player[i].prop_PlayerNet_0.field_Private_Int16_0}</color>] [<color=#edffbf>F</color>:<color=#ddff87>{fps}</color>]\n";
					}
					catch { }
				}

				try
				{
					Ui.QMBasic.GUIInfo.text = $"{string.Format("{0:hh:mm:ss tt}", DateTime.Now)}\nLobby: {player.Count}\nF: {getf.field_Private_List_1_IUser_1.Count}/{getf.field_Private_List_1_IUser_0.Count}\nIn: {Hooks.typeofworld}" +
						$"\nGtime: {curentp.UserProcessorTime.Hours}:{curentp.UserProcessorTime.Minutes}:{curentp.UserProcessorTime.Seconds}";

				}
				catch { }

				yield return new WaitForSeconds(1.1f);
			}


		}
	}
}
