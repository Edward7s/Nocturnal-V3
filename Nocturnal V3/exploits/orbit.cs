using Nocturnal.Settings.Wrappers;
using UnityEngine;
namespace Nocturnal.Exploits
{
	internal class Orbit
	{
		internal static GameObject OrbitObject = null;
		internal static bool orbiting = false;
		private static float gapvalue = 0.1f;
		private static bool OrbitOut = false;

		internal static void Run()
		{
			if (!orbiting || OrbitObject == null || Target.targetUser == null)
				return;
			try
			{
				OrbitObject.transform.position = Target.targetUser.prop_VRCPlayer_1.field_Internal_Animator_0.GetBoneTransform(HumanBodyBones.Head).position;

			}
			catch { return; }
			if (OrbitOut)
			{
				gapvalue += 1.5f * Time.deltaTime;
				if (gapvalue > 3)
					OrbitOut = false;
			}
			else
			{
				gapvalue -= 1.5f * Time.deltaTime;
				if (gapvalue < 0.1)
					OrbitOut = true;
			}

			for (int i = 0; i < Pickups.pickupsobs.Length; i++)
			{
				VRC.SDKBase.Networking.SetOwner(VRC.Player.prop_Player_0.field_Private_VRCPlayerApi_0, Pickups.pickupsobs[i].gameObject);
				OrbitObject.transform.Rotate(new Vector3(0, 360 / Pickups.pickupsobs.Length, 0));
				Pickups.pickupsobs[i].transform.position = OrbitObject.transform.position + OrbitObject.transform.forward * gapvalue;
				Pickups.pickupsobs[i].transform.LookAt(OrbitObject.transform);
				OrbitObject.transform.localEulerAngles = new Vector3(0, OrbitObject.transform.localEulerAngles.y + 5 / (gapvalue * 200), 0);
			}

		}
	}
}
