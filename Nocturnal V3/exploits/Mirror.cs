using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Nocturnal;
using UnityEngine;
namespace Nocturnal.Exploits
{
    internal class Mirror
    {
        internal static void Togglemirror(bool valuem,bool isoptimized = false)
        {

            if (!valuem)
            {
               var mirrors = GameObject.FindObjectsOfType<VRC.SDK3.Components.VRCMirrorReflection>();
                for (int i = 0; i < mirrors.Length; i++)
                    if (mirrors[i].name == "NocturnalMirror")
                        GameObject.DestroyImmediate(mirrors[i].gameObject);
                return;
            }

            try
            {
                var gameobj = GameObject.CreatePrimitive(PrimitiveType.Quad);
                gameobj.name = "NocturnalMirror";
                gameobj.transform.position = VRC.Player.prop_Player_0.transform.position + VRC.Player.prop_Player_0.transform.forward;
                gameobj.GetComponent<MeshRenderer>().material = new Material(Shader.Find("FX/MirrorReflection"));
                var layers = isoptimized ? 263680 : 263681;
                gameobj.AddComponent<VRC.SDK3.Components.VRCMirrorReflection>().m_ReflectLayers = layers;
                gameobj.AddComponent<Rigidbody>().isKinematic = true;
                gameobj.AddComponent<VRC.SDK3.Components.VRCPickup>().proximity = 1f;
                gameobj.transform.localEulerAngles = VRC.Player.prop_Player_0.transform.localEulerAngles                    ;
                gameobj.transform.localScale = new Vector3(5, 3.5f, 1);
                gameobj.layer = 13;
            }
            catch (Exception ex)
            {
                NocturnalC.Log(ex);
            }
          
        }

    }
}
