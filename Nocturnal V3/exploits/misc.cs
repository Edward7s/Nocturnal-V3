using System.Linq;
using UnityEngine;
using VRC.Core;
using VRC.SDKBase;
using VRC.UI;

namespace Nocturnal.Exploits
{
	internal class Misc
	{
		internal static void DeletePortals()
		{
			var array = Resources.FindObjectsOfTypeAll<PortalTrigger>();
			for (int i = 0; i < array.Length; i++)
				if (array[i].gameObject.active)
					GameObject.DestroyImmediate(array[i].gameObject);
		}

		internal static void ChangeToAvatar(string aviid)
		{
			PageAvatar component = GameObject.Find("Screens").transform.Find("Avatar").GetComponent<PageAvatar>();
			component.field_Public_SimpleAvatarPedestal_0.field_Internal_ApiAvatar_0 = new ApiAvatar
			{
				id = aviid,
			};
			component.ChangeToSelectedAvatar();
		}

		internal static void OutlineObjectAndChildren(GameObject obj, Color colora, bool onoff = true)
		{
			try
			{
				var rend = obj.GetComponentsInChildren<Renderer>(true);
				if (onoff)
				{

					var outm = new Material(Ui.Bundles.outlineShader);
					outm.EnableKeyword("_falloff");
					outm.SetFloat("_falloff", 0);
					outm.EnableKeyword("_Color");
					outm.SetColor("_Color", colora);
					outm.EnableKeyword("width");
					outm.SetFloat("_Width", 0.6f);
					outm.name = "espshaderNocturnal";
					for (int i = 0; i < rend.Length; i++)
					{
						var materials = rend[i].sharedMaterials.ToList();
						materials.Add(outm);
						rend[i].materials = materials.ToArray();
						rend[i].allowOcclusionWhenDynamic = false;

					}



				}
				else
				{
					for (int i = 0; i < rend.Length; i++)
					{
						var materials = rend[i].sharedMaterials.ToList();
						for (int i2 = 0; i2 < materials.Count; i2++)
						{
							if (materials[i2].name == "espshaderNocturnal")
								materials.Remove(materials[i2]);
						}
						rend[i].materials = materials.ToArray();
						rend[i].allowOcclusionWhenDynamic = true;

					}


				}
			}
			catch { }

		}

		internal static void Jump()
		{

			Vector3 velocity = Networking.LocalPlayer.GetVelocity();
			velocity.y = Networking.LocalPlayer.GetJumpImpulse();
			Networking.LocalPlayer.SetVelocity(velocity);
		}
	}
}
