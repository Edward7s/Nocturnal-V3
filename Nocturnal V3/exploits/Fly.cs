using UnityEngine;
namespace Nocturnal.Exploits
{
	internal class Fly
	{
		internal static bool flyToggle = false;

		internal static void Run()
		{
			if (!flyToggle) return;
			Settings.Wrappers.Extensions.ToggleController(!Exploits.Fly.flyToggle);
			try
			{
				var cameraex = Settings.Wrappers.Extensions.MainCamera();
				if (cameraex == null) return;

				float flyspeed = Input.GetKey(KeyCode.LeftShift) ? Time.deltaTime * (Settings.ConfigVars.Flyspeed * 50) : Time.deltaTime * (Settings.ConfigVars.Flyspeed * 25);
				if (VRC.Player.prop_Player_0.field_Private_VRCPlayerApi_0.IsUserInVR())
				{
					if (Input.GetAxis("Oculus_CrossPlatform_SecondaryThumbstickVertical") < 0f)
						VRC.Player.prop_Player_0.transform.position -= cameraex.up * flyspeed;
					if (Input.GetAxis("Oculus_CrossPlatform_SecondaryThumbstickVertical") > 0f)
						VRC.Player.prop_Player_0.transform.position += cameraex.up * flyspeed;

					if (Input.GetAxis("Vertical") != 0f)
						VRC.Player.prop_Player_0.transform.position += cameraex.forward * (flyspeed * Input.GetAxis("Vertical"));

					if (Input.GetAxis("Horizontal") != 0f)
						VRC.Player.prop_Player_0.transform.position += cameraex.transform.right * (flyspeed * Input.GetAxis("Horizontal"));
				}
				else
				{
					if (Input.GetKey(KeyCode.W))
						VRC.Player.prop_Player_0.transform.position += cameraex.forward * flyspeed;

					if (Input.GetKey(KeyCode.S))
						VRC.Player.prop_Player_0.transform.position -= cameraex.forward * flyspeed;

					if (Input.GetKey(KeyCode.A))
						VRC.Player.prop_Player_0.transform.position -= cameraex.right * (flyspeed / 2);

					if (Input.GetKey(KeyCode.D))
						VRC.Player.prop_Player_0.transform.position += cameraex.right * (flyspeed / 2);

					if (Input.GetKey(KeyCode.Q))
						VRC.Player.prop_Player_0.transform.position -= cameraex.up * (flyspeed / 2);

					if (Input.GetKey(KeyCode.E))
						VRC.Player.prop_Player_0.transform.position += cameraex.up * (flyspeed / 2);
				}
			}
			catch { }


		}
	}
}
