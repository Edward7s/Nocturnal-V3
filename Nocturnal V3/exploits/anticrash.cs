using Nocturnal.Settings;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;


namespace Nocturnal.Exploits
{
     class Anticrash
    {
        internal static Shader[] s_shaderArr;
        internal static string[] WhiteList;
        private  MeshFilter[] _meshFilters { get; set; }
        private  Renderer[] _renderers { get; set; }
        private SkinnedMeshRenderer[] _skinnedMeshRender { get; set; }
        private ParticleSystem[] _particleSystems { get; set; }
        private  Light[] _lights { get; set; }
        private  AudioSource[] _audioSources { get; set; }
        private  AvatarAudioSourceFilter[] _avatarAudioSourceFilters { get; set; }
        //Thx to Autumn for telling me about constructors.
        private GameObject Object { get; set; }
        private VRCPlayer Player { get; set; }
        private int _count { get; set; } = 0;
        private int _countMaterials { get; set; } = 0;
      
        private bool _badShader = true;
        private VRC.SDK3.Dynamics.PhysBone.Components.VRCPhysBone[] _vrcPhysBone { get; set; }
        private VRC.SDK3.Dynamics.PhysBone.Components.VRCPhysBoneCollider[] _vrcPhysBoneColider { get; set; }

        private void CheckShader(Material material)
        {
            for (int i = 0; i < s_shaderArr.Length; i++)
                if (material.shader.name == s_shaderArr[i].name && material.shader.GetPropertyCount() == s_shaderArr[i].GetPropertyCount()) return;

            NocturnalC.Log($"Shader Replaced:[{material.shader.name}]", "Anti Crash", ConsoleColor.Yellow, Settings.ConfigVars.logshaderstoconsole);
            material.shader = Shader.Find("Standard");
        }

        private bool Mesh()
        {
            for (int i = 0; i < _renderers.Length; i++)
                _countMaterials += _renderers[i].materials.Length;

            if (_renderers.Length > Settings.ConfigVars.maxmeshes)
            {
                NocturnalC.Log($"User {Player._player.field_Private_APIUser_0.displayName} hiddien by anticrash (Meshes) Meshrenders:[{_renderers.Length}] ", "Anti Crash", ConsoleColor.Yellow);
                return false;
            }
            if (_countMaterials > 800)
            {
                NocturnalC.Log($"User {Player._player.field_Private_APIUser_0.displayName} hiddien by anticrash (Meshes) Giagantic number of materials:[{_countMaterials}] ", "Anti Crash", ConsoleColor.Yellow);
                return false;
            }
            if (_renderers.Length > Settings.ConfigVars.maxmeshes / 1.5f)
            {
                NocturnalC.Log($"User {Player._player.field_Private_APIUser_0.displayName} hiddien by anticrash (Meshes) SkindeMeshRenders:[{_renderers.Length}] ", "Anti Crash", ConsoleColor.Yellow);
                return false;
            }
            return true;
        }
        
        private bool Verticies()
        {
            _skinnedMeshRender = Object.GetComponentsInChildren<SkinnedMeshRenderer>(true);
            _meshFilters = Object.GetComponentsInChildren<MeshFilter>(true);

            for (int i = 0; i < _meshFilters.Length; i++)
                _count += _meshFilters[i].sharedMesh.vertexCount;
            
            if (_count > Settings.ConfigVars.maxverticies)
            {
                NocturnalC.Log($"User {Player._player.field_Private_APIUser_0.displayName} hiddien by anticrash (Verticies(Mesh)) To Much Verticies:[{_count}] ", "Anti Crash", ConsoleColor.Yellow);
                return false;
            }
            _count = 0;
            for (int i = 0; i < _skinnedMeshRender.Length; i++)
                _count += _skinnedMeshRender[i].sharedMesh.vertexCount;
            
            if (_count > Settings.ConfigVars.maxverticies)
            {
                NocturnalC.Log($"User {Player._player.field_Private_APIUser_0.displayName} hiddien by anticrash (Verticies(SkinnedMeshRender)) To Much Verticies:[{_count}] ", "Anti Crash", ConsoleColor.Yellow);
                return false;
            }

            return true;
        }


        private void Shaders()
        {
            for (int v = 0; v < _renderers.Length; v++)
            {
                for (int i = 0; i < _renderers[v].materials.Length; i++)
                {
                    _badShader = false;
                    if (_renderers[v].materials[i].shader.name.Contains("crash") || _renderers[v].materials[i].shader.name.Contains("lag") || _renderers[v].materials[i].shader.name.Contains("Crash") || _renderers[v].materials[i].shader.name.Contains("Lag"))
                    {
                         NocturnalC.Log($"Shader Replaced:[{ _renderers[v].materials[i].shader.name}] on: {_renderers[v].name}", "Anti Crash", ConsoleColor.Yellow, Settings.ConfigVars.logshaderstoconsole);
                        _renderers[v].materials[i].shader = Shader.Find("Standard");
                        continue;
                    }
                    for (int i3 = 0; i3 < WhiteList.Length; i3++)
                            if (_renderers[v].materials[i].shader.name.Contains(WhiteList[i].Trim())) _badShader = true;

                    if (!_badShader)
                    {
                       NocturnalC.Log($"Shader Replaced:[{ _renderers[v].materials[i].shader.name}] on: {_renderers[v].name}", "Anti Crash", ConsoleColor.Yellow, Settings.ConfigVars.logshaderstoconsole);
                       _renderers[v].materials[i].shader = Shader.Find("Standard");
                    }
                }
            }
        }

        private void Particles()
        {
            _particleSystems = Object.GetComponentsInChildren<ParticleSystem>(true);
            _count = 0;
            for (int i = 0; i < _particleSystems.Length; i++)
            {
                if (i > Settings.ConfigVars.particlesystem)
                {
                    Component.Destroy(_particleSystems[i]);
                    continue;
                }
                if (_particleSystems[i].maxParticles >= Settings.ConfigVars.maxparticles)
                {
                    Component.Destroy(_particleSystems[i]);
                    continue;
                }
                if (_particleSystems[i].emissionRate >= 200)
                    _particleSystems[i].emissionRate = 20;

                _count += _particleSystems[i].particleCount;

            }

            if (_count > 50000)
                for (int i = 0; i < _particleSystems.Length; i++)
                    Component.Destroy(_particleSystems[i]);
        }

        private void Lights()
        {
            _lights = Object.GetComponentsInChildren<Light>(true);
            if (_lights.Length <= 5) return;
            for (int i = 0; i < _lights.Length; i++)
                if (i > 5)
                    Component.Destroy(_lights[i]);
        }

        private void Audio()
        {
            _audioSources = Object.GetComponentsInChildren<AudioSource>(true);
            _avatarAudioSourceFilters = Object.GetComponentsInChildren<AvatarAudioSourceFilter>(true);
            if (_avatarAudioSourceFilters.Length > Settings.ConfigVars.maxaudiosources)
            {
                for (int i = 0; i < _avatarAudioSourceFilters.Length; i++)
                    if (i > Settings.ConfigVars.maxaudiosources)
                        Component.Destroy(_avatarAudioSourceFilters[i]);
            }
            for (int i = 0; i < _audioSources.Length; i++)
            {
                if (_audioSources[i].clip == null)
                {
                    Component.Destroy(_audioSources[i]);
                    continue;
                }
                if (i > Settings.ConfigVars.maxaudiosources)
                    Component.Destroy(_audioSources[i]);
            }
        }


        private void PhysBones()
        {
            _vrcPhysBone = Object.GetComponentsInChildren<VRC.SDK3.Dynamics.PhysBone.Components.VRCPhysBone>(true);
            _vrcPhysBoneColider = Object.GetComponentsInChildren<VRC.SDK3.Dynamics.PhysBone.Components.VRCPhysBoneCollider>(true);

            for (int i = 0; i < _vrcPhysBoneColider.Length; i++)
            {

                if (i > _vrcPhysBoneColider.Length)
                {
                    Component.Destroy(_vrcPhysBoneColider[i]);
                    continue; 
                }

                if (_vrcPhysBoneColider[i].radius > 2) _vrcPhysBoneColider[i].radius = 0.1f;
            }

            for (int i = 0; i < _vrcPhysBone.Length; i++)
            {
                if (_vrcPhysBone[i].bones.Count > Settings.ConfigVars.MaxPhysBonesBones)
                {
                    Component.Destroy(_vrcPhysBone[i]);
                    continue;
                }

                if (i > Settings.ConfigVars.MaxPhysBones)
                {
                    Component.Destroy(_vrcPhysBone[i]);
                    continue;
                }

                if (_vrcPhysBone[i].radius > 4)
                    _vrcPhysBone[i].radius = 0.1f;

                if (_vrcPhysBone[i].colliders.Count > Settings.ConfigVars.MaxPhysColidersChecks)
                    _vrcPhysBone[i].colliders.Clear();       
            }

        }

        public Anticrash(VRCPlayer vrcPlayer)
        {
            Object = vrcPlayer.field_Private_VRCAvatarManager_0.field_Private_VRCAvatarDescriptor_0.gameObject;
            Player = vrcPlayer;
            _renderers = Object.GetComponentsInChildren<Renderer>(true);
            if (ConfigVars.meshp) { if (!Mesh()) return; }
            if (ConfigVars.verticiesp) { if (!Verticies()) return; }
            if (ConfigVars.ShaderP) Shaders();
            if (ConfigVars.particlep) Particles();
            if (ConfigVars.lightsp) Lights();
            if (ConfigVars.audiosourcep) Audio();
            if (ConfigVars.PhysBonesAnti) PhysBones();
            Object.SetActive(true);

        }












    }
}
