using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;
namespace Nocturnal.Exploits
{
    internal class CameraPov
    {
        internal static UnityEngine.Camera s_instance { get; private set; }
        internal static void Generate()
        {
            //2000000
            s_instance = new GameObject("Camera").gameObject.AddComponent<UnityEngine.Camera>();
            s_instance.transform.parent = VRC.Player.prop_Player_0.transform.Find("AnimationController/HeadAndHandIK/HeadEffector").transform;
            s_instance.transform.localPosition = new Vector3(0,- Settings.ConfigVars.YCamera * 2, Settings.ConfigVars.ZCamera * 5);
            s_instance.transform.localEulerAngles = new Vector3(0, 180, 0);
            s_instance.farClipPlane = 4;
            s_instance.cullingMask  = 3000000;
            s_instance.clearFlags = CameraClearFlags.SolidColor;
            s_instance.targetTexture = s_renderTexture;
            s_instance.gameObject.SetActive(Settings.ConfigVars.CameraView);
        }

        private static RenderTexture s_renderTexture { get; set; }

        public CameraPov()
        {
            Transform path = GameObject.Find("/UserInterface").transform.Find("UnscaledUI/HudContent_Old/Hud/VoiceDotParent/VoiceDot").transform;
            GameObject camerarend = GameObject.Instantiate(path.gameObject, path.transform.parent.parent);
            s_renderTexture = new RenderTexture(524, 524,0);
            Component.DestroyImmediate(camerarend.GetComponent<UnityEngine.UI.Image>());
            camerarend.AddComponent<UnityEngine.UI.RawImage>().texture = s_renderTexture;
            camerarend.GetComponent<UnityEngine.UI.RawImage>().color = new Color(1, 1, 1, Settings.ConfigVars.CameraOpacity);
            camerarend.transform.localScale = new Vector3(4, 4, 4);
            camerarend.transform.localPosition = new Vector3(300f, -270f, 0);
            camerarend.name = "Camera Render";
            camerarend.gameObject.SetActive(Settings.ConfigVars.CameraView);
        }




    }
}
